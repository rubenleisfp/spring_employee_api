package com.fp.controller;

import java.util.List;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import com.fp.dto.EmployeeDto;

import jakarta.validation.Valid;


/**
 * http://localhost:8080/v3/api-docs
 * http://localhost:8080/swagger-ui/index.html
 * 
 */


public class EmployeeController {


	@Operation(summary = "Get all employees")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Employees found", content = {
					@Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EmployeeDto.class)))
			})
	})
	public List<EmployeeDto> findAll() {
		throw new UnsupportedOperationException();
	}

	@Operation(summary = "Get an employee by its id")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Employee found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = EmployeeDto.class))
			}),
			@ApiResponse(responseCode = "404", description = "Employee not found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
			})
	})
	public ResponseEntity<?> getById(@PathVariable("id") Long employeeId) {
		throw new UnsupportedOperationException();

	}

	@Operation(summary = "Get all employees with %name%")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Employees found", content = {
					@Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EmployeeDto.class)))
			})
	})
	public List<EmployeeDto> findByName(@RequestParam(name = "name") String name) {
		throw new UnsupportedOperationException();
	}


	@Operation(summary = "Create an employee")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Employee created", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = EmployeeDto.class))
			}),
			@ApiResponse(responseCode = "400", description = "Data not valid", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
			})
	})
	public ResponseEntity<EmployeeDto> create(@Valid @RequestBody EmployeeDto employeeDto) {
		throw new UnsupportedOperationException();
	}


	@Operation(summary = "Update an employee by its id")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Employee updated", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = EmployeeDto.class))
			}),
			@ApiResponse(responseCode = "404", description = "Employee not found", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
			}),
			@ApiResponse(responseCode = "400", description = "Data not valid", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
			})
	})
	public ResponseEntity<?> update(@PathVariable(value = "id") Long employeeId,
			@Valid @RequestBody EmployeeDto employeeDto) {
		throw new UnsupportedOperationException();
	}


	public ResponseEntity<?> delete(@PathVariable("id") Long employeeId) {
		throw new UnsupportedOperationException();
	}
}
